{"version":3,"sources":["types/number.ts","store/actions/number.ts","hooks/useActions.ts","hooks/useTypedSelector.ts","components/Button.tsx","components/Input.tsx","components/MainBlock/MainBlock.tsx","App.tsx","store/reducers/numberReducer.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["NumberActionTypes","createNumber","dispatch","random","Math","ceil","type","CREATE_NUMBER","payload","SET_WIN","RESET_TRIALS","setUserNumber","userNumber","SET_USERNUMBER","setWin","condition","setTrials","SET_TRIALS","SetHelperMessage","parameter","SET_HELPER_MESSAGE","useActions","useDispatch","bindActionCreators","NumberActionCreators","useTypedSelector","useSelector","styles","btn_pd2","paddingTop","Button","text","action","style","className","onClick","Input","placeholder","onChange","e","parseInt","target","value","onKeyPress","key","container","margin","bigSize","width","height","MainBlock","state","number","numberComputer","numberUser","win","trials","helperMessage","title","center","background","display","position","top","bottom","right","left","App","useEffect","initialState","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ec093ff4.chunk.js","sourcesContent":["export interface NumberState {\n    numberComputer: number,\n    numberUser: number,\n    win: boolean,\n    trials: number,\n    helperMessage: string | null\n}\n\nexport enum NumberActionTypes {\n    CREATE_NUMBER = \"CREATE_NUMBER\",\n    SET_USERNUMBER = \"SET_USERNUMBER\",\n    SET_WIN = \"SET_WIN\",\n    SET_TRIALS = \"SET_TRIALS\",\n    RESET_TRIALS = \"RESET_TRIALS\",\n    SET_HELPER_MESSAGE = \"SET_HELPER_MESSAGE\"\n}\n\ninterface CreateNumberAction {\n    type: NumberActionTypes.CREATE_NUMBER,\n    payload: number;\n}\n\ninterface SetUserNumberAction {\n    type: NumberActionTypes.SET_USERNUMBER,\n    payload: number;\n}\n\ninterface setWinAction {\n    type: NumberActionTypes.SET_WIN,\n    payload: boolean\n}\n\ninterface setTrialsAction {\n    type: NumberActionTypes.SET_TRIALS\n}\n\ninterface resetTrialsAction {\n    type: NumberActionTypes.RESET_TRIALS\n}\n\ninterface setHelperMessageAction {\n    type: NumberActionTypes.SET_HELPER_MESSAGE,\n    payload: string\n}\n\n\nexport type NumberAction = CreateNumberAction \n| SetUserNumberAction \n| setWinAction \n| setTrialsAction \n| resetTrialsAction\n| setHelperMessageAction","import { Dispatch } from \"react\"\nimport {NumberAction, NumberActionTypes} from '../../types/number'\n\nexport const createNumber = () => {\n    return (dispatch: Dispatch<NumberAction>) => {\n        const random = Math.ceil(Math.random()*10);\n        dispatch({type: NumberActionTypes.CREATE_NUMBER, payload: random})\n        dispatch({type: NumberActionTypes.SET_WIN, payload: false})\n        dispatch({type: NumberActionTypes.RESET_TRIALS})\n    }\n}\n\nexport const setUserNumber = (userNumber: number) => {\n    return (dispatch: Dispatch<NumberAction>) => {\n        dispatch({type: NumberActionTypes.SET_USERNUMBER, payload: userNumber})\n    };\n}\n\nexport const setWin = (condition: boolean) => {\n    return (dispatch: Dispatch<NumberAction>) => {\n        dispatch({type: NumberActionTypes.SET_WIN, payload: condition})\n    };\n}\n\nexport const setTrials = () => {\n    return (dispatch: Dispatch<NumberAction>) => {\n        dispatch({type: NumberActionTypes.SET_TRIALS})\n    };\n}\n\nexport const SetHelperMessage = (parameter: string) => {\n    if (parameter === \"LESS\") {\n        return (dispatch: Dispatch<NumberAction>) => {\n            dispatch({type: NumberActionTypes.SET_HELPER_MESSAGE, payload: 'The number must be greater!'})\n        }\n    } else {\n        return (dispatch: Dispatch<NumberAction>) => {\n            dispatch({type: NumberActionTypes.SET_HELPER_MESSAGE, payload: 'The number must be less!'})\n        }\n    }\n}","import {useDispatch} from 'react-redux'\nimport {bindActionCreators} from 'redux'\nimport * as NumberActionCreators from '../store/actions/number'\n\nexport const useActions = () => {\n    const dispatch = useDispatch()\n    return bindActionCreators(NumberActionCreators, dispatch);\n}","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport { RootState } from '../store/reducers';\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;","import React from 'react';\nimport { StylesDictionary } from '../types/stylesDictionary';\n\ninterface ButtonProps {\n    text: string,\n    action: () => void\n}\n\nconst Button: React.FC<ButtonProps> = ({text, action}) => {\n    return (\n        <div style={styles.btn_pd2}>\n            <button type=\"button\" className=\"btn btn-primary\" onClick={action}>{text}</button>\n        </div>\n    );\n};\n\nconst styles: StylesDictionary = {\n    btn_pd2: {\n        paddingTop: '2rem'\n    }\n}\n\nexport default Button;","import React from 'react';\nimport { useActions } from '../hooks/useActions';\nimport { StylesDictionary } from '../types/stylesDictionary';\n\nconst Input: React.FC = () => {\n    const {setUserNumber, setTrials } = useActions();\n\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setUserNumber(parseInt(e.target.value));\n    }\n\n    const OnKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n            setTrials();\n        }\n    }\n\n    return (\n        <div style={styles.btn_pd2}>\n            <input className=\"form-control\" type=\"text\" placeholder=\"Your turn, sir!\" onChange={onChange} onKeyPress={OnKeyPressHandler}></input>\n        </div>\n    );\n};\n\nconst styles: StylesDictionary = {\n    btn_pd2: {\n        paddingTop: '2rem'\n    }\n}\n\nexport default Input;","import React from 'react';\nimport { useActions } from '../../hooks/useActions';\nimport { useTypedSelector } from '../../hooks/useTypedSelector';\nimport { StylesDictionary } from '../../types/stylesDictionary';\nimport Button from '../Button';\nimport Input from '../Input';\n\nconst MainBlock: React.FC = () => {\n    const {createNumber, setWin, setTrials, SetHelperMessage} = useActions();\n    const {numberComputer, numberUser, win, trials, helperMessage} = useTypedSelector(state => state.number);\n\n    const OnClickTry = () => {\n        if (win) {\n            return;\n        }\n\n        setTrials();\n        if (numberComputer === numberUser) {\n            setWin(true);\n        } else {\n            setWin(false);\n\n            if (numberComputer > numberUser) {\n                SetHelperMessage('LESS');\n            } else {\n                SetHelperMessage('')\n            }\n\n        }\n    }\n\n    const onClickRefresh = () => {\n        createNumber();\n    }\n    \n    return (\n        <div style={styles.container}>\n            <div className=\"card\" style={styles.bigSize}>\n                <div className=\"card-body\">\n                    <div className=\"card-title\" style={styles.title}>\n                        <h2>Guess a number</h2>\n                    </div>\n                    computer guessed the number. Are you able to guess it?\n\n                    <Input/>\n                    <Button text={`Let's try it!`} action={OnClickTry}/>\n                    <Button text={'Please, refresh the number'} action={onClickRefresh}/>\n\n                    {!win && trials > 0 ? <div> {helperMessage} You tried {trials} times</div>: null}\n                    {win ? <div>Congratulations! You win! you tried {trials} times.</div> : null}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst styles:StylesDictionary = {\n    container: {\n        margin: 'auto'\n    },\n    bigSize: {\n        width: '40rem',\n        height: '40rem'\n    },\n}\n\nexport default MainBlock;","import React from 'react';\nimport MainBlock from './components/MainBlock/MainBlock';\nimport { StylesDictionary } from './types/stylesDictionary';\nimport { useEffect } from 'react';\nimport { useActions } from './hooks/useActions';\n\n\nexport const App: React.FC = () => {\n  const {createNumber} = useActions();\n\n  useEffect(() => {\n    createNumber();\n  }, [])\n\n  return (\n    <div style={styles.center}>\n      <MainBlock/>\n    </div>\n  );\n}\n\n\nconst styles: StylesDictionary = {\n  center: {\n    background: '#999999',\n    display:'flex', \n    position: 'absolute', \n    top:0, \n    bottom:0, \n    right:0,\n    left:0,\n  }\n}\n\nexport default App;\n","import { NumberAction, NumberActionTypes, NumberState } from \"../../types/number\"\n\nconst initialState: NumberState = {\n    numberComputer: 0,\n    numberUser: 0,\n    win: false,\n    trials: 0,\n    helperMessage: null\n}\n\nexport const numberReducer = (state=initialState, action: NumberAction): NumberState => {\n    switch(action.type) {\n        case NumberActionTypes.CREATE_NUMBER:\n            return {...state, numberComputer: action.payload}\n        case NumberActionTypes.SET_USERNUMBER:\n            return {...state, numberUser: action.payload}\n        case NumberActionTypes.SET_WIN:\n            return {...state, win: action.payload}\n        case NumberActionTypes.SET_TRIALS:\n            return {...state, trials: state.trials + 1}\n        case NumberActionTypes.RESET_TRIALS:\n            return {...state, trials: 0}\n        case NumberActionTypes.SET_HELPER_MESSAGE:\n            return {...state, helperMessage: action.payload}\n        default:\n            return state\n    }\n}","import {combineReducers} from 'redux';\nimport { numberReducer } from './numberReducer';\n\nexport const rootReducer = combineReducers({\n    number: numberReducer\n})\n\nexport type RootState = ReturnType<typeof rootReducer>\n","import {applyMiddleware, createStore} from 'redux'\nimport thunk from 'redux-thunk'\nimport { rootReducer } from './reducers'\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}