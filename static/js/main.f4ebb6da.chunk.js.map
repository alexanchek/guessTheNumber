{"version":3,"sources":["types/number.ts","store/actions/number.ts","hooks/useActions.ts","hooks/useTypedSelector.ts","components/Button.tsx","components/Input.tsx","components/MainBlock/MainBlock.tsx","App.tsx","store/reducers/numberReducer.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["NumberActionTypes","createNumber","dispatch","random","String","Math","ceil","type","CREATE_NUMBER","payload","SET_WIN","RESET_TRIALS","SET_USERNUMBER","SET_HELPER_MESSAGE","setUserNumber","userNumber","setWin","condition","setTrials","numberComputer","numberUser","win","a","parseInt","SET_TRIALS","SetHelperMessage","parameter","useActions","useDispatch","bindActionCreators","NumberActionCreators","useTypedSelector","useSelector","styles","btn_pd2","paddingTop","Button","text","testLabel","action","style","className","onClick","Input","state","number","useState","value","setValue","id","placeholder","onChange","e","target","onKeyPress","key","preventDefault","container","margin","padding","bigSize","width","height","MainBlock","trials","helperMessage","title","center","background","display","position","top","bottom","right","left","App","useEffect","initialState","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"qWAQYA,E,uEAAAA,K,8BAAAA,E,gCAAAA,E,kBAAAA,E,wBAAAA,E,4BAAAA,E,yCAAAA,M,KCHL,IAAMC,EAAe,WACxB,OAAO,SAACC,GACJ,IAAMC,EAASC,OAAOC,KAAKC,KAAmB,GAAdD,KAAKF,WACrCD,EAAS,CAACK,KAAMP,EAAkBQ,cAAeC,QAASN,IAC1DD,EAAS,CAACK,KAAMP,EAAkBU,QAASD,SAAS,IACpDP,EAAS,CAACK,KAAMP,EAAkBW,eAClCT,EAAS,CAACK,KAAMP,EAAkBY,eAAgBH,QAAS,KAC3DP,EAAS,CAACK,KAAMP,EAAkBa,mBAAoBJ,QAAS,OAI1DK,EAAgB,SAACC,GAC1B,OAAO,SAACb,GACJA,EAAS,CAACK,KAAMP,EAAkBY,eAAgBH,QAASM,MAItDC,EAAS,SAACC,GACnB,OAAO,SAACf,GACJA,EAAS,CAACK,KAAMP,EAAkBU,QAASD,QAASQ,MAI/CC,EAAY,SAACC,EAAwBC,EAAoBC,GAClE,8CAAO,WAAMnB,GAAN,SAAAoB,EAAA,0DAECD,GAAsB,KAAfD,EAFR,sDAICG,SAASH,GAAc,IAAMG,SAASH,GAAc,GAJrD,uBAKClB,EAAS,CAACK,KAAMP,EAAkBa,mBAAoBJ,QAAS,yCALhE,0BAUHP,EAAS,CAACK,KAAMP,EAAkBwB,aAG9BD,SAASJ,KAAoBI,SAASH,GACtClB,EAASc,GAAO,KAEhBd,EAASc,GAAO,IAEZO,SAASJ,GAAkBI,SAASH,GACpClB,EAASuB,EAAiB,SAE1BvB,EAASuB,EAAiB,MArB/B,2CAAP,uDA2BSA,EAAmB,SAACC,GAC7B,MAAkB,SAAdA,EACO,SAACxB,GACJA,EAAS,CAACK,KAAMP,EAAkBa,mBAAoBJ,QAAS,iCAG5D,SAACP,GACJA,EAAS,CAACK,KAAMP,EAAkBa,mBAAoBJ,QAAS,+BC3D9DkB,EAAa,WACtB,IAAMzB,EAAW0B,cACjB,OAAOC,6BAAmBC,EAAsB5B,ICHvC6B,EAAoDC,I,OCc3DC,EAA2B,CAC7BC,QAAS,CACLC,WAAY,SAILC,EAduB,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,OACrD,OACI,qBAAKC,MAAOP,EAAOC,QAAnB,SACI,wBAAQ3B,KAAK,SAAS,UAAS+B,EAAWG,UAAU,kBAAkBC,QAASH,EAA/E,SAAwFF,O,QCqB9FJ,EAA2B,CAC7BC,QAAS,CACLC,WAAY,SAILQ,EAlCS,WACpB,MAAqChB,IAA7Bb,EAAR,EAAQA,cAAeI,EAAvB,EAAuBA,UACvB,EAA4Ca,GAAiB,SAAAa,GAAK,OAAIA,EAAMC,UAApEzB,EAAR,EAAQA,WAAYD,EAApB,EAAoBA,eAAgBE,EAApC,EAAoCA,IACpC,EAA4ByB,mBAAS,IAArC,mBAAQC,EAAR,KAAeC,EAAf,KAgBA,OACI,qBAAKR,MAAOP,EAAOC,QAAnB,SACI,sBAAMe,GAAG,eAAT,SACA,uBAAOR,UAAU,eAAe,UAAQ,cAAclC,KAAK,SAAS2C,YAAY,kBAAkBH,MAAO3B,EAAY+B,SAjB5G,SAACC,GACdJ,EAASI,EAAEC,OAAON,OAClBjC,EAAcsC,EAAEC,OAAON,QAesHO,WAZvH,SAACF,GACT,UAAVA,EAAEG,MACFH,EAAEI,iBAEF1C,EAAciC,GACd7B,EAAUC,EAAgBC,EAAYC,YCqB5CY,EAA0B,CAC5BwB,UAAW,CACPC,OAAQ,OACRC,QAAS,UAEbC,QAAS,CACLC,MAAO,OACPC,OAAQ,UAIDC,EA7Ca,WACxB,MAAkCpC,IAA3B1B,EAAP,EAAOA,aAAciB,EAArB,EAAqBA,UACrB,EAAiEa,GAAiB,SAAAa,GAAK,OAAIA,EAAMC,UAA1F1B,EAAP,EAAOA,eAAgBC,EAAvB,EAAuBA,WAAYC,EAAnC,EAAmCA,IAAK2C,EAAxC,EAAwCA,OAAQC,EAAhD,EAAgDA,cAUhD,OACI,qBAAKzB,MAAOP,EAAOwB,UAAnB,SACI,qBAAKhB,UAAU,OAAOD,MAAOP,EAAO2B,QAApC,SACI,sBAAKnB,UAAU,YAAf,UACI,qBAAKA,UAAU,aAAaD,MAAOP,EAAOiC,MAA1C,SACI,kDAFR,sEAMI,cAAC,EAAD,IACA,cAAC,EAAD,CAAQ7B,KAAI,gBAAmBE,OAlB5B,WACfrB,EAAUC,EAAgBC,EAAYC,IAiByBiB,UAAW,WAC9D,cAAC,EAAD,CAAQD,KAAM,6BAA8BE,OAfrC,WACnBtC,KAcgFqC,UAAW,YAE7EjB,EAAqC,KAA/B,8BAAO4C,KACb5C,GAAO2C,EAAS,EAAI,8CAAgB,4BAAIA,IAApB,aAA8C,KACnE3C,EAAM,8BAAK,0EAA6C2C,EAA7C,eAA6E,aCZvG/B,EAA2B,CAC/BkC,OAAQ,CACNC,WAAY,UACZC,QAAQ,OACRC,SAAU,WACVC,IAAI,EACJC,OAAO,EACPC,MAAM,EACNC,KAAK,IAIMC,EA3Bc,WAC3B,IAAO1E,EAAgB0B,IAAhB1B,aAMP,OAJA2E,qBAAU,WACR3E,MACC,IAGD,qBAAKuC,MAAOP,EAAOkC,OAAnB,SACE,cAAC,EAAD,O,eCHAU,EAA4B,CAC9B1D,eAAgB,IAChBC,WAAY,GACZC,KAAK,EACL2C,OAAQ,EACRC,cAAe,MCfNa,EAAcC,0BAAgB,CACvClC,ODiByB,WAA4D,IAA3DD,EAA0D,uDAApDiC,EAActC,EAAsC,uCACpF,OAAOA,EAAOhC,MACV,KAAKP,EAAkBQ,cACnB,OAAO,2BAAIoC,GAAX,IAAkBzB,eAAgBoB,EAAO9B,UAC7C,KAAKT,EAAkBY,eACnB,OAAO,2BAAIgC,GAAX,IAAkBxB,WAAYmB,EAAO9B,UACzC,KAAKT,EAAkBU,QACnB,OAAO,2BAAIkC,GAAX,IAAkBvB,IAAKkB,EAAO9B,UAClC,KAAKT,EAAkBwB,WACnB,OAAO,2BAAIoB,GAAX,IAAkBoB,OAAQpB,EAAMoB,OAAS,IAC7C,KAAKhE,EAAkBW,aACnB,OAAO,2BAAIiC,GAAX,IAAkBoB,OAAQ,IAC9B,KAAKhE,EAAkBa,mBACnB,OAAO,2BAAI+B,GAAX,IAAkBqB,cAAe1B,EAAO9B,UAC5C,QACI,OAAOmC,M,QE/BNoC,EAAQC,sBAAYH,EAAaI,8BAAoBC,0BAAgBC,OCClFC,IAASC,OACP,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFO,SAASC,eAAe,W","file":"static/js/main.f4ebb6da.chunk.js","sourcesContent":["export interface NumberState {\r\n    numberComputer: string,\r\n    numberUser: string,\r\n    win: boolean,\r\n    trials: number,\r\n    helperMessage: string | null\r\n}\r\n\r\nexport enum NumberActionTypes {\r\n    CREATE_NUMBER = \"CREATE_NUMBER\",\r\n    SET_USERNUMBER = \"SET_USERNUMBER\",\r\n    SET_WIN = \"SET_WIN\",\r\n    SET_TRIALS = \"SET_TRIALS\",\r\n    RESET_TRIALS = \"RESET_TRIALS\",\r\n    SET_HELPER_MESSAGE = \"SET_HELPER_MESSAGE\",\r\n}\r\n\r\ninterface CreateNumberAction {\r\n    type: NumberActionTypes.CREATE_NUMBER,\r\n    payload: string;\r\n}\r\n\r\ninterface SetUserNumberAction {\r\n    type: NumberActionTypes.SET_USERNUMBER,\r\n    payload: string;\r\n}\r\n\r\ninterface setWinAction {\r\n    type: NumberActionTypes.SET_WIN,\r\n    payload: boolean\r\n}\r\n\r\ninterface setTrialsAction {\r\n    type: NumberActionTypes.SET_TRIALS\r\n}\r\n\r\ninterface resetTrialsAction {\r\n    type: NumberActionTypes.RESET_TRIALS\r\n}\r\n\r\ninterface setHelperMessageAction {\r\n    type: NumberActionTypes.SET_HELPER_MESSAGE,\r\n    payload: string\r\n}\r\n\r\n\r\nexport type NumberAction = CreateNumberAction \r\n| SetUserNumberAction \r\n| setWinAction \r\n| setTrialsAction \r\n| resetTrialsAction\r\n| setHelperMessageAction","import { Dispatch } from \"react\"\nimport { ThunkAction } from \"redux-thunk\";\nimport {NumberAction, NumberActionTypes} from '../../types/number'\nimport { RootState } from \"../reducers\";\n\nexport const createNumber = () => {\n    return (dispatch: Dispatch<NumberAction>) => {\n        const random = String(Math.ceil(Math.random()*10));\n        dispatch({type: NumberActionTypes.CREATE_NUMBER, payload: random})\n        dispatch({type: NumberActionTypes.SET_WIN, payload: false})\n        dispatch({type: NumberActionTypes.RESET_TRIALS});\n        dispatch({type: NumberActionTypes.SET_USERNUMBER, payload: ''});\n        dispatch({type: NumberActionTypes.SET_HELPER_MESSAGE, payload: ''});\n    }\n}\n\nexport const setUserNumber = (userNumber: string) => {\n    return (dispatch: Dispatch<NumberAction>) => {\n        dispatch({type: NumberActionTypes.SET_USERNUMBER, payload: userNumber})\n    };\n}\n\nexport const setWin = (condition: boolean) => {\n    return (dispatch: Dispatch<NumberAction>) => {\n        dispatch({type: NumberActionTypes.SET_WIN, payload: condition});\n    };\n}\n\nexport const setTrials = (numberComputer: string, numberUser: string, win: boolean): ThunkAction<void, RootState, null, NumberAction> => {\n    return async dispatch => {\n        // we must check out if the game is finished or user doesnt write a number\n        if (win || numberUser === '') return;\n\n        if (parseInt(numberUser) > 10 || parseInt(numberUser) < 1) {\n            dispatch({type: NumberActionTypes.SET_HELPER_MESSAGE, payload: 'Please, input a number from 1 to 10!'})\n            return;\n        }\n\n        // increase a trial by 1\n        dispatch({type: NumberActionTypes.SET_TRIALS});\n\n        // check out values and set \"win state\"\n        if (parseInt(numberComputer) === parseInt(numberUser)) {\n            dispatch(setWin(true));\n        } else {\n            dispatch(setWin(false));\n\n            if (parseInt(numberComputer) > parseInt(numberUser)) {\n                dispatch(SetHelperMessage('LESS'));\n            } else {\n                dispatch(SetHelperMessage(''));\n            }\n        }\n    }\n}\n\nexport const SetHelperMessage = (parameter: string) => {\n    if (parameter === \"LESS\") {\n        return (dispatch: Dispatch<NumberAction>) => {\n            dispatch({type: NumberActionTypes.SET_HELPER_MESSAGE, payload: 'The number must be greater!'})\n        }\n    } else {\n        return (dispatch: Dispatch<NumberAction>) => {\n            dispatch({type: NumberActionTypes.SET_HELPER_MESSAGE, payload: 'The number must be less!'})\n        }\n    }\n}","import {useDispatch} from 'react-redux'\nimport {bindActionCreators} from 'redux'\nimport * as NumberActionCreators from '../store/actions/number'\n\nexport const useActions = () => {\n    const dispatch = useDispatch()\n    return bindActionCreators(NumberActionCreators, dispatch);\n}","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport { RootState } from '../store/reducers';\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;","import React from 'react';\r\nimport { StylesDictionary } from '../types/stylesDictionary';\r\n\r\ninterface ButtonProps {\r\n    text: string,\r\n    testLabel: string,\r\n    action: () => void\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({text, testLabel, action}) => {\r\n    return (\r\n        <div style={styles.btn_pd2}>\r\n            <button type=\"button\" data-cy={testLabel} className=\"btn btn-primary\" onClick={action}>{text}</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst styles: StylesDictionary = {\r\n    btn_pd2: {\r\n        paddingTop: '2rem'\r\n    }\r\n}\r\n\r\nexport default Button;","import React, { useState } from 'react';\r\nimport { useActions } from '../hooks/useActions';\r\nimport { useTypedSelector } from '../hooks/useTypedSelector';\r\nimport { StylesDictionary } from '../types/stylesDictionary';\r\n\r\nconst Input: React.FC = () => {\r\n    const { setUserNumber, setTrials } = useActions();\r\n    const { numberUser, numberComputer, win } = useTypedSelector(state => state.number);\r\n    const [ value, setValue ] = useState('');\r\n\r\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.target.value);\r\n        setUserNumber(e.target.value);\r\n    }\r\n\r\n    const OnKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault();\r\n\r\n            setUserNumber(value);\r\n            setTrials(numberComputer, numberUser, win);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={styles.btn_pd2}>\r\n            <form id=\"form-control\">\r\n            <input className=\"form-control\" data-cy=\"input-field\" type=\"number\" placeholder=\"Your turn, sir!\" value={numberUser} onChange={onChange} onKeyPress={OnKeyPressHandler}></input>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst styles: StylesDictionary = {\r\n    btn_pd2: {\r\n        paddingTop: '2rem'\r\n    }\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\nimport { useActions } from '../../hooks/useActions';\r\nimport { useTypedSelector } from '../../hooks/useTypedSelector';\r\nimport { StylesDictionary } from '../../types/stylesDictionary';\r\nimport Button from '../Button';\r\nimport Input from '../Input';\r\n\r\nconst MainBlock: React.FC = () => {\r\n    const {createNumber, setTrials} = useActions();\r\n    const {numberComputer, numberUser, win, trials, helperMessage} = useTypedSelector(state => state.number);\r\n\r\n    const OnClickTry = () => {\r\n        setTrials(numberComputer, numberUser, win);\r\n    }\r\n\r\n    const onClickRefresh = () => {\r\n        createNumber();\r\n    }\r\n    \r\n    return (\r\n        <div style={styles.container}>\r\n            <div className=\"card\" style={styles.bigSize}>\r\n                <div className=\"card-body\">\r\n                    <div className=\"card-title\" style={styles.title}>\r\n                        <h2>Guess a number</h2>\r\n                    </div>\r\n                    computer guessed the number from 1 to 10. Are you able to guess it?\r\n\r\n                    <Input />\r\n                    <Button text={`Let's try it!`} action={OnClickTry} testLabel={\"try-it\"}/>\r\n                    <Button text={'Please, refresh the number'} action={onClickRefresh} testLabel={\"refresh\"}/>\r\n\r\n                    {!win ? <div>{ helperMessage }</div> : null }\r\n                    {!win && trials > 0 ? <div> You tried <b>{trials}</b> times.</div>: null}\r\n                    {win ? <div><strong>Congratulations! You win! you tried {trials} times.</strong></div> : null}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst styles:StylesDictionary = {\r\n    container: {\r\n        margin: 'auto',\r\n        padding: '0 20px'\r\n    },\r\n    bigSize: {\r\n        width: '100%',\r\n        height: '40rem'\r\n    },\r\n}\r\n\r\nexport default MainBlock;","import React from 'react';\nimport MainBlock from './components/MainBlock/MainBlock';\nimport { StylesDictionary } from './types/stylesDictionary';\nimport { useEffect } from 'react';\nimport { useActions } from './hooks/useActions';\n\n\nexport const App: React.FC = () => {\n  const {createNumber} = useActions();\n\n  useEffect(() => {\n    createNumber();\n  }, [])\n\n  return (\n    <div style={styles.center}>\n      <MainBlock/>\n    </div>\n  );\n}\n\n\nconst styles: StylesDictionary = {\n  center: {\n    background: '#999999',\n    display:'flex', \n    position: 'absolute', \n    top:0, \n    bottom:0, \n    right:0,\n    left:0,\n  }\n}\n\nexport default App;\n","import { NumberAction, NumberActionTypes, NumberState } from \"../../types/number\"\n\n/*\n\nCREATE_NUMBER - create a new number from 1 to 10, reset trials\nSET_USERNUMBER - set the number of the player\nSET_WIN - if the game is finished, SET_WIN stops the game and doesn't allow to send new numbers\nSET_TRIALS - increase the amount of trials by 1\nRESET_TRIALS - reset the amount of trials to 0.\nSET_HELPER_MESSAGE - whatever a player number it shows that a number must be less or greater\n\n*/\n\nconst initialState: NumberState = {\n    numberComputer: '0',\n    numberUser: '',\n    win: false,\n    trials: 0,\n    helperMessage: null\n}\n\nexport const numberReducer = (state=initialState, action: NumberAction): NumberState => {\n    switch(action.type) {\n        case NumberActionTypes.CREATE_NUMBER:\n            return {...state, numberComputer: action.payload}\n        case NumberActionTypes.SET_USERNUMBER:\n            return {...state, numberUser: action.payload}\n        case NumberActionTypes.SET_WIN:\n            return {...state, win: action.payload}\n        case NumberActionTypes.SET_TRIALS:\n            return {...state, trials: state.trials + 1}\n        case NumberActionTypes.RESET_TRIALS:\n            return {...state, trials: 0}\n        case NumberActionTypes.SET_HELPER_MESSAGE:\n            return {...state, helperMessage: action.payload}\n        default:\n            return state\n    }\n}","import {combineReducers} from 'redux';\nimport { numberReducer } from './numberReducer';\n\nexport const rootReducer = combineReducers({\n    number: numberReducer\n})\n\nexport type RootState = ReturnType<typeof rootReducer>\n","import {applyMiddleware, createStore} from 'redux'\nimport thunk from 'redux-thunk'\nimport { rootReducer } from './reducers'\nimport {composeWithDevTools} from 'redux-devtools-extension';\n\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}