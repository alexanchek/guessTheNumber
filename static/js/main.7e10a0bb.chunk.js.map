{"version":3,"sources":["types/number.ts","store/actions/number.ts","hooks/useActions.ts","hooks/useTypedSelector.ts","components/Button.tsx","components/Input.tsx","components/MainBlock/MainBlock.tsx","App.tsx","store/reducers/numberReducer.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["NumberActionTypes","createNumber","dispatch","random","String","Math","ceil","type","CREATE_NUMBER","payload","SET_WIN","RESET_TRIALS","SET_USERNUMBER","setUserNumber","userNumber","setWin","condition","setTrials","numberComputer","numberUser","a","SET_TRIALS","parseInt","SetHelperMessage","parameter","SET_HELPER_MESSAGE","useActions","useDispatch","bindActionCreators","NumberActionCreators","useTypedSelector","useSelector","styles","btn_pd2","paddingTop","Button","text","action","style","className","onClick","Input","state","number","win","useState","value","setValue","id","placeholder","onChange","e","target","onKeyPress","key","preventDefault","container","margin","bigSize","width","height","MainBlock","trials","helperMessage","title","center","background","display","position","top","bottom","right","left","App","useEffect","initialState","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7e10a0bb.chunk.js","sourcesContent":["export interface NumberState {\n    numberComputer: string,\n    numberUser: string,\n    win: boolean,\n    trials: number,\n    helperMessage: string | null\n}\n\nexport enum NumberActionTypes {\n    CREATE_NUMBER = \"CREATE_NUMBER\",\n    SET_USERNUMBER = \"SET_USERNUMBER\",\n    SET_WIN = \"SET_WIN\",\n    SET_TRIALS = \"SET_TRIALS\",\n    RESET_TRIALS = \"RESET_TRIALS\",\n    SET_HELPER_MESSAGE = \"SET_HELPER_MESSAGE\"\n}\n\ninterface CreateNumberAction {\n    type: NumberActionTypes.CREATE_NUMBER,\n    payload: string;\n}\n\ninterface SetUserNumberAction {\n    type: NumberActionTypes.SET_USERNUMBER,\n    payload: string;\n}\n\ninterface setWinAction {\n    type: NumberActionTypes.SET_WIN,\n    payload: boolean\n}\n\ninterface setTrialsAction {\n    type: NumberActionTypes.SET_TRIALS\n}\n\ninterface resetTrialsAction {\n    type: NumberActionTypes.RESET_TRIALS\n}\n\ninterface setHelperMessageAction {\n    type: NumberActionTypes.SET_HELPER_MESSAGE,\n    payload: string\n}\n\n\nexport type NumberAction = CreateNumberAction \n| SetUserNumberAction \n| setWinAction \n| setTrialsAction \n| resetTrialsAction\n| setHelperMessageAction","import { Dispatch } from \"react\"\nimport { ThunkAction } from \"redux-thunk\";\nimport {NumberAction, NumberActionTypes} from '../../types/number'\nimport { RootState } from \"../reducers\";\n\nexport const createNumber = () => {\n    return (dispatch: Dispatch<NumberAction>) => {\n        const random = String(Math.ceil(Math.random()*10));\n        dispatch({type: NumberActionTypes.CREATE_NUMBER, payload: random})\n        dispatch({type: NumberActionTypes.SET_WIN, payload: false})\n        dispatch({type: NumberActionTypes.RESET_TRIALS});\n        dispatch({type: NumberActionTypes.SET_USERNUMBER, payload: ''});\n    }\n}\n\nexport const setUserNumber = (userNumber: string) => {\n    return (dispatch: Dispatch<NumberAction>) => {\n        dispatch({type: NumberActionTypes.SET_USERNUMBER, payload: userNumber})\n    };\n}\n\nexport const setWin = (condition: boolean) => {\n    return (dispatch: Dispatch<NumberAction>) => {\n        dispatch({type: NumberActionTypes.SET_WIN, payload: condition});\n    };\n}\n\nexport const setTrials = (numberComputer: string, numberUser: string): ThunkAction<void, RootState, null, NumberAction> => {\n    return async dispatch => {\n        dispatch({type: NumberActionTypes.SET_TRIALS});\n\n        if (parseInt(numberComputer) === parseInt(numberUser)) {\n            dispatch(setWin(true));\n        } else {\n            dispatch(setWin(false));\n\n            if (parseInt(numberComputer) > parseInt(numberUser)) {\n                dispatch(SetHelperMessage('LESS'));\n            } else {\n                dispatch(SetHelperMessage(''));\n            }\n        }\n    }\n}\n\nexport const SetHelperMessage = (parameter: string) => {\n    if (parameter === \"LESS\") {\n        return (dispatch: Dispatch<NumberAction>) => {\n            dispatch({type: NumberActionTypes.SET_HELPER_MESSAGE, payload: 'The number must be greater!'})\n        }\n    } else {\n        return (dispatch: Dispatch<NumberAction>) => {\n            dispatch({type: NumberActionTypes.SET_HELPER_MESSAGE, payload: 'The number must be less!'})\n        }\n    }\n}","import {useDispatch} from 'react-redux'\nimport {bindActionCreators} from 'redux'\nimport * as NumberActionCreators from '../store/actions/number'\n\nexport const useActions = () => {\n    const dispatch = useDispatch()\n    return bindActionCreators(NumberActionCreators, dispatch);\n}","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport { RootState } from '../store/reducers';\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;","import React from 'react';\nimport { StylesDictionary } from '../types/stylesDictionary';\n\ninterface ButtonProps {\n    text: string,\n    action: () => void\n}\n\nconst Button: React.FC<ButtonProps> = ({text, action}) => {\n    return (\n        <div style={styles.btn_pd2}>\n            <button type=\"button\" className=\"btn btn-primary\" onClick={action}>{text}</button>\n        </div>\n    );\n};\n\nconst styles: StylesDictionary = {\n    btn_pd2: {\n        paddingTop: '2rem'\n    }\n}\n\nexport default Button;","import React, { useState } from 'react';\nimport { useActions } from '../hooks/useActions';\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport { StylesDictionary } from '../types/stylesDictionary';\n\nconst Input: React.FC = () => {\n    const { setUserNumber, setTrials } = useActions();\n    const { numberUser, numberComputer, win } = useTypedSelector(state => state.number);\n    const [ value, setValue ] = useState('');\n\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setValue(e.target.value);\n        setUserNumber(e.target.value);\n    }\n    \n    const OnKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n            e.preventDefault();\n\n            if (win) return;\n            setUserNumber(value);\n\n            setTrials(numberComputer, numberUser);\n\n        }\n    }\n\n    return (\n        <div style={styles.btn_pd2}>\n            <form id=\"form-control\">\n            <input className=\"form-control\" type=\"number\" placeholder=\"Your turn, sir!\" value={numberUser} onChange={onChange} onKeyPress={OnKeyPressHandler}></input>\n            </form>\n        </div>\n    );\n};\n\nconst styles: StylesDictionary = {\n    btn_pd2: {\n        paddingTop: '2rem'\n    }\n}\n\nexport default Input;","import React from 'react';\nimport { useActions } from '../../hooks/useActions';\nimport { useTypedSelector } from '../../hooks/useTypedSelector';\nimport { StylesDictionary } from '../../types/stylesDictionary';\nimport Button from '../Button';\nimport Input from '../Input';\n\nconst MainBlock: React.FC = () => {\n    const {createNumber, setTrials} = useActions();\n    const {numberComputer, numberUser, win, trials, helperMessage} = useTypedSelector(state => state.number);\n\n    const OnClickTry = () => {\n        if (win) {\n            return;\n        }\n        setTrials(numberComputer, numberUser);\n    }\n\n    const onClickRefresh = () => {\n        createNumber();\n\n    }\n    \n    return (\n        <div style={styles.container}>\n            <div className=\"card\" style={styles.bigSize}>\n                <div className=\"card-body\">\n                    <div className=\"card-title\" style={styles.title}>\n                        <h2>Guess a number</h2>\n                    </div>\n                    computer guessed the number. Are you able to guess it?\n\n                    <Input />\n                    <Button text={`Let's try it!`} action={OnClickTry}/>\n                    <Button text={'Please, refresh the number'} action={onClickRefresh}/>\n\n                    {!win && trials > 0 ? <div> {helperMessage} You tried {trials} times</div>: null}\n                    {win ? <div>Congratulations! You win! you tried {trials} times.</div> : null}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst styles:StylesDictionary = {\n    container: {\n        margin: 'auto'\n    },\n    bigSize: {\n        width: '40rem',\n        height: '40rem'\n    },\n}\n\nexport default MainBlock;","import React from 'react';\nimport MainBlock from './components/MainBlock/MainBlock';\nimport { StylesDictionary } from './types/stylesDictionary';\nimport { useEffect } from 'react';\nimport { useActions } from './hooks/useActions';\n\n\nexport const App: React.FC = () => {\n  const {createNumber} = useActions();\n\n  useEffect(() => {\n    createNumber();\n  }, [])\n\n  return (\n    <div style={styles.center}>\n      <MainBlock/>\n    </div>\n  );\n}\n\n\nconst styles: StylesDictionary = {\n  center: {\n    background: '#999999',\n    display:'flex', \n    position: 'absolute', \n    top:0, \n    bottom:0, \n    right:0,\n    left:0,\n  }\n}\n\nexport default App;\n","import { NumberAction, NumberActionTypes, NumberState } from \"../../types/number\"\n\n/*\n\nCREATE_NUMBER - create a new number from 1 to 10, reset trials\nSET_USERNUMBER - set the number of the player\nSET_WIN - if the game is finished, SET_WIN stops the game and doesn't allow to send new numbers\nSET_TRIALS - increase the amount of trials by 1\nRESET_TRIALS - reset the amount of trials to 0.\nSET_HELPER_MESSAGE - whatever a player number it shows that a number must be less or greater\n\n*/\n\nconst initialState: NumberState = {\n    numberComputer: '0',\n    numberUser: '0',\n    win: false,\n    trials: 0,\n    helperMessage: null\n}\n\nexport const numberReducer = (state=initialState, action: NumberAction): NumberState => {\n    switch(action.type) {\n        case NumberActionTypes.CREATE_NUMBER:\n            return {...state, numberComputer: action.payload}\n        case NumberActionTypes.SET_USERNUMBER:\n            return {...state, numberUser: action.payload}\n        case NumberActionTypes.SET_WIN:\n            return {...state, win: action.payload}\n        case NumberActionTypes.SET_TRIALS:\n            return {...state, trials: state.trials + 1}\n        case NumberActionTypes.RESET_TRIALS:\n            return {...state, trials: 0}\n        case NumberActionTypes.SET_HELPER_MESSAGE:\n            return {...state, helperMessage: action.payload}\n        default:\n            return state\n    }\n}","import {combineReducers} from 'redux';\nimport { numberReducer } from './numberReducer';\n\nexport const rootReducer = combineReducers({\n    number: numberReducer\n})\n\nexport type RootState = ReturnType<typeof rootReducer>\n","import {applyMiddleware, createStore} from 'redux'\nimport thunk from 'redux-thunk'\nimport { rootReducer } from './reducers'\nimport {composeWithDevTools} from 'redux-devtools-extension';\n\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}